import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.metrics import classification_report
import joblib

# Generate synthetic dataset for lead scoring
np.random.seed(42)
data = pd.DataFrame({
    'LeadID': range(1, 501),
    'Age': np.random.randint(20, 60, 500),
    'Clicks': np.random.randint(1, 20, 500),
    'WebsiteVisits': np.random.randint(1, 50, 500),
    'LocationScore': np.random.uniform(0, 1, 500),
    'Outcome': np.random.choice([0, 1], size=500, p=[0.7, 0.3])  # 0: No conversion, 1: Conversion
})

# Split the data into features and target
X = data[['Age', 'Clicks', 'WebsiteVisits', 'LocationScore']]
y = data['Outcome']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a Gradient Boosting model
model = GradientBoostingClassifier(random_state=42)
model.fit(X_train, y_train)

# Evaluate the model
y_pred = model.predict(X_test)
report = classification_report(y_test, y_pred, output_dict=True)

# Save the model to a file
model_path = 'lead_model.pkl'
joblib.dump(model, model_path)

# Output the model evaluation metrics
print("Model saved at:", model_path)
print("Classification Report:")
print(classification_report(y_test, y_pred))
